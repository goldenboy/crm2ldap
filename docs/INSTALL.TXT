SugarCRM-OpenLDAP-Contacts SYNC
===============================
You have some contacts in a SugarCRM MySQL base.
Want them in an openLDAP?
Using MySQL as an OpenLDAP backend is a no-way (really bad perf.)
Theses scripts will help you maintain a specific branch in your OpenLDAP with
synchronised contacts from MYSQL.
SugarCRM is the only write place for theses contacts and OpenLDAP is a fast-read
access for them, available as addressbok for Thunderbird and Outlook.
There is also a script to retrieve SugarCRM users on an LDAP branch.


Requirements
============
Python
------
you'll need some python packages
sudo easy_install MySQL-python
sudo easy_install python-ldap
# for the next crm2ldap project we'l add some others
#sudo easy_install python-daemon
#sudo easy_install ConfigParser
#sudo easy_install simplejson


OpenLDAP
--------
you'll need as well mozilla.schema in /etc/ldap/schemas/, get it from
https://wiki.mozilla.org/MailNews:Mozilla_LDAP_Address_Book_Schema and you could
need as well extension.schema for some Outlook fields. Both are normally joined 
with theses sources.
add theses line to your slapd.conf
--slapd.conf--
include         /etc/ldap/schema/mozilla.schema
include         /etc/ldap/schema/extension.schema
--end slapd.conf--
check theses files are readable by the openLDAP user and reload OpenLDAP.
Remind as well that if you use LDAP replication every slave should also get
theses schemas.

extension.schema will add the following fields:
	otherFacsimiletelephoneNumber
	IPPhone
	homeURL
mozilla.schema will add:
	homePhone
	mail
	mobile
	mozillaCustom1
	mozillaCustom2
	mozillaCustom3
	mozillaCustom4
	mozillaHomeCountryName
	mozillaHomeLocalityName
	mozillaHomePostalCode
	mozillaHomeState
	mozillaHomeStreet
	mozillaHomeStreet2
	mozillaHomeUrl
	mozillaNickname
	mozillaSecondEmail
	mozillaUseHtmlMail
	mozillaWorkStreet2
	mozillaWorkUrl
	nsAIMid
	postalCode
	postOfficeBox
	title

You need a write access at your ldap , and a branch available for theses 
contacts, something like : ou=MySugarContacts,ou=Contacts,dc=Company,dc=com
This write access by the sync script MUST BE THE ONLY one, edition 
(modif/delete) on theses ldap contacts by a third party won't be detected.
You should better store all theses SugarCRM contacts on a specific branch of 
your LDAP and consider SugarCRM is the master for this branch edition, this 
script will delete and recreate the contact record in openLDAP on update, every 
other change not done in SugarCRM will be drop (deletion by SugarCRM is ok).

Create the branches where you will store contacts and accounts from SugarCRM. So
the ldif could be (here we use ou=contact, dc=example,dc=com and not 
ou=MySugarContacts,ou=Contacts,dc=Company,dc=com):
--ldif--
dn: ou=contact, dc=example,dc=com
ou: contact
objectClass: top
objectClass: organizationalUnit

dn: ou=accounts, ou=contact, dc=example,dc=com
ou: accounts
objectClass: top
objectClass: organizationalUnit
--end ldif--

In term of LDAP acl you may need to protect anonymous people from reading your 
contacts. This is an example of acl that you could use to protect these new 
branches:
--slapd.conf--
access to dn.subtree="ou=contact,dc=example,dc=com"
        by dn="cn=admin,dc=example,dc=com" write
        by dn="cn=ldapwriter,ou=system,dc=example,dc=com" write
        by anonymous none
        by dn.one="ou=People,dc=example,dc=com" read
        by * none
--end slapd.conf--
We used a special "ldapwriter" account with write rights, it's the user we will 
use in the crm2ldap scripts, performing the synchronization.

MySQL
-----
On the database side you need some sync columns with some triggers ont them.
See the attached file: altersugar.sql.
Read warnings about triggers in README.txt, running this script commands as root
may be useful for you.

Read the script (it's short) and adapt it for your needs:
 - set the database name
 - check that you need queries on custom tables or not. Run the query 
      show tables like '%_cstm';
   to see if you have any custom table like "contacts_cstm" or "accounts_cstm".
   If you do not have these table remove queries on theses tables
 - if you will not use the user synchronisation scripts then you do not need the
  queries to the users and users_cstm tables

The triggers will manage the ldap_sync new columns values. It's the key of the
synchronization status of the records.
ldap_sync status is:
	0: not initialized
	1: sync
	2: sync started
	3: not sync anymore

CRM2LDAP:
---------
Check for CUSTOM ZONE in the python scripts (yes you MUST do that in all the 
scripts, or at least the first ones if you will not use user sync, it should be
in a shared config file, it will be for next versions):
 * ldapcontactsync/sugarLDAPContactSync.py : Individual Contact synchronization
 * ldapcontactsync/sugarLDAPManageSync.py : Script detecting individuals that we
     should sync (launch the previous one)
 * ldapcontactsync/sugarLDAPUsersSync.py : same thing but for user sync
 * ldapcontactsync/sugarLDAPManageSyncUsers.py : same thing but for user sync
 
Adjust MySQl settings in sugarLDAPManageSync.py and both your LDAP and MySQL 
settings in sugarLDAPContactSync.py. (same thing for sugarLDAPManageSyncUsers.py
and sugarLDAPUsersSync.py if you want to use it).
Then adjust the objectClass you need for your sugar-ldap contacts and the fields
 mappings in sugarLDAPContactSync.py (& sugarLDAPUsersSync.py if needed).
You can even adjust your custom fields mapping if you use custom fields in Sugar.

Then test (see there's a -v options for verbosity on scripts) the 
sugarLDAPContactSync.py with one sugar ID as parameter. to find the id of one 
user you can check the url of this contact in sugarcrm, the id is the very long
uid after "&record=".
/opt/sugar-ldap-sync/sugarLDAPContactSync.py -v 3a4b2201-ea39-f8d4-bc1e-4e6de7c5e15b
Errors you may encounter:
 * Unknown column 'contacts.portal_name' in 'field list' : the query used on the
  contacts table does not correspond to your real list of column. Fix it on the 
  script by commenting it with a starting  "#" in KEYS_MAPPING definition (l110)
  and in the real query (by adding "-- " in the begining of the field line, this
  is a comment in SQL), the query is line 483. We'll need to fix that field list
  in a next version of the program
 
If all went well you can test sugarLDAPManageSync.py by giving it the max number
of records to sync and the base_path to find the sugarLDAPContactSync.py script.
If it's ok then plan theses jobs on the crontab (with crontab -e as root for 
example).
exemple: 
/opt/sugar-ldap-sync/sugarLDAPManageSync.py -v -l 1 /opt/sugar-ldap-sync

Crontab Example:
# m h  dom mon dow   command
# Run sugarcrm==>OpenLDAP synchro every minute (except the first), grouped by 100 sync tasks
1-59 * * * *    nice -n 10 /opt/sugar-ldap-sync/sugarLDAPManageSync.py -s -l 100 /opt/sugar-ldap-sync
# Run sugarcrm==>OpenLDAP synchro every minute, grouped by 100 sync tasks. This one try to collect as well sync errors still running
0 * * * *       nice -n 10 /opt/sugar-ldap-sync/sugarLDAPManageSync.py -s --force -l 100 /opt/sugar-ldap-sync

If you want to add the User synchronisation then you'll have to do the same for 
Users with the manager script sugarLDAPManageSyncUsers.py
test it :
/opt/sugar-ldap-sync/sugarLDAPManageSyncUsers.py -v -l 1 /opt/sugar-ldap-sync
Install in crontab (crontab -e)
# Run sugarcrm==>OpenLDAP synchro every minute (except the first), grouped by 100 sync tasks USERS
1-59 * * * *    nice -n 10 /opt/sugar-ldap-sync/sugarLDAPManageSyncUsers.py -s -l 100 /opt/sugar-ldap-sync

RECOVERY/REINIT
---------------
For records in errors which have an ldap_sync status at 2 use the --force in 
sugarLDAPManageSync.py (like the last line in the crontab example)

To get all the things back at initial state delete your contacts from ldap 
(only on the corresponding branch) and set all ldap_sync status to 0 with SQL 
queries:

UPDATE contacts SET ldap_sync=0;
UPDATE accounts_contacts SET ldap_sync=0;
UPDATE accounts SET ldap_sync=0;
UPDATE email_addresses SET ldap_sync=0;
UPDATE email_addr_bean_rel SET ldap_sync=0;
UPDATE contacts_cstm SET ldap_sync=0;
UPDATE accounts_cstm SET ldap_sync=0;
UPDATE users SET ldap_sync=0;

(there is a reset.sql in sql subdirectory)

The ldap_uid columns created in contacts & users are autoincrement columns, you
should nopt need to reinit anything there, they're only use to generate a unique
ldap uid when synced, and as you deleted all the contacts in OpenLDAP you will
not encounter any problem.

There is also an uninstal.sql script in the sql subdirectory to remove added
columns and triggers.

TRY IT IN Thunderbird
----------------------
It may depend on your thunderbird version. For me I have a 2.0.0.24:
* Button AddressBook
* File > New > LDAPDirectory
   - Name: sugarCRM LDAP contacts
   - hostname : <your ldap DNS name>
   - Base DN: ou=contact,dc=example,dc=com (or anything else you've set)
   - Port Number: usually 389
   - Bind DN : your complete bind dn (like uid=foo,ou=People,dc=example,dc=com)
* close thunderbird (yes, really, you should try it the windows way, close & 
reopen)
* reopen the AddressBook, and select your ldap adressbok, then type a name or
surname, or just a few letters, and some contacts should appears.

You can link this addressbook to email composition; Edit thunderbird Preferences
go to the Composition tab, then enable "Directory Server" and select this new
"sugarCRM LDAP contacts"
